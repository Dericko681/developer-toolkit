---
# Install kubectl (Kubernetes command-line tool).
# Supports specific versions or fetches the latest stable release.

- name: Determine desired kubectl version
  ansible.builtin.set_fact:
    _kubectl_version: "{{ kubectl_version | default('latest') }}"
  tags:
    - devops
    - kubectl

- name: Get latest stable kubectl version if 'latest' is requested
  ansible.builtin.uri:
    url: "https://dl.k8s.io/release/stable.txt"
    return_content: true
    method: GET
  register: kubectl_latest_version_url
  when: _kubectl_version == 'latest'
  tags:
    - devops
    - kubectl

- name: Set _kubectl_version to actual latest stable version
  ansible.builtin.set_fact:
    _kubectl_version: "{{ kubectl_latest_version_url.content | trim }}"
  when: _kubectl_version == 'latest'
  tags:
    - devops
    - kubectl

- name: Check if desired kubectl version is already installed
  ansible.builtin.command: "kubectl version --client --short"
  register: kubectl_installed_check
  failed_when: false
  changed_when: false
  tags:
    - devops
    - kubectl

- name: Download kubectl binary
  ansible.builtin.get_url:
    url: "https://dl.k8s.io/release/{{ _kubectl_version }}/bin/linux/{{ ansible_architecture | regex_replace('x86_64', 'amd64') }}/kubectl"
    dest: /usr/local/bin/kubectl
    mode: '0755'
    # Fetch checksum dynamically for the specific version
    checksum: "sha256:{{ lookup('url', 'https://dl.k8s.io/release/' + _kubectl_version + '/bin/linux/' + (ansible_architecture | regex_replace('x86_64', 'amd64')) + '/kubectl.sha256') }}"
  become: true # Install to system-wide bin directory
  # Only download if not installed or if installed version doesn't match desired version
  when: kubectl_installed_check.rc != 0 or _kubectl_version not in kubectl_installed_check.stdout
  tags:
    - devops
    - kubectl