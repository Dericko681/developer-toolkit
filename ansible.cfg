[defaults]
# This specifies the default inventory file. It's good practice to explicitly
# define it here to ensure Ansible always knows where to find your hosts.
inventory = ./inventory/hosts.ini

# This tells Ansible where to look for roles. By default, it looks in 'roles'
# relative to the playbook, which matches your current structure. Explicitly
# defining it is a good habit.
roles_path = ./roles

# Defines the default user for SSH connections to remote hosts.
# For localhost connection (ansible_connection=local), this is often not needed.
# However, if you're targeting remote machines, set this to the appropriate user.
# Example: remote_user = your_ansible_user
# remote_user = ansible_user # Uncomment and set if targeting remote hosts

# If set to True, Ansible will prompt for the SSH password for remote connections.
# Set to False if you're using SSH keys (recommended for production) or 'ansible_connection=local'.
ask_pass = False

# If True, Ansible will attempt to escalate privileges (e.g., using sudo) by default.
# This is often needed for installing software and making system-wide changes.
become = True

# The method used for privilege escalation (e.g., 'sudo', 'su', 'doas').
become_method = sudo

# The user to become (e.g., 'root' for system-wide changes).
become_user = root

# If True, Ansible will prompt for the become password (e.g., sudo password).
# Set to False if you have passwordless sudo configured (highly recommended for automation)
# or are using 'ansible_connection=local'.
become_ask_pass = False

# Whether Ansible should gather facts about the remote hosts. Facts are variables
# containing system information (OS, network interfaces, etc.). This is almost
# always useful for conditional logic and dynamic configurations.
gather_facts = True

# If True, Ansible will strictly check host keys. Setting this to False should
# be done with extreme caution, primarily for volatile development/test environments
# where hosts frequently change and security is less of a concern.
# For production, it's safer to either keep it True and manage known_hosts, or
# use a robust inventory system that handles host key management.
host_key_checking = False # Consider setting to 'True' for production and managing known_hosts.

# Changes the output format of Ansible. 'yaml' is generally more readable than 'default'.
# 'community.general.ansible_default_callback' provides a good balance of detail.
stdout_callback = yaml

# Whether to show tasks that were skipped. Useful for debugging and understanding
# why certain tasks didn't run. Keeping it False makes output cleaner for successful runs.
display_skipped_hosts = False

# Whether to show tasks that completed successfully. Can make the output very verbose.
# For production, you might want to disable this unless debugging.
display_ok_hosts = True

# Disables cowsay, which prints funny ASCII cows. Set to 0 to enable.
# Usually disabled for cleaner output in production.
nocows = 1

# How many parallel processes (forks) Ansible will use. Adjust based on your system's resources
# and the number of target hosts. For local development, 5 is usually fine.
# For larger environments, you might increase this cautiously.
# forks = 5 # This is duplicated below in [ssh_connection], so it's only needed in one place.

# Speeds up Ansible by reducing the number of SSH operations. Requires 'requiretty' to be disabled
# in sudoers if using sudo. Generally highly recommended for performance.
pipelining = True

# Path to an optional log file. Uncomment to enable logging.
# Logging is highly recommended for production environments to track playbook executions.
# log_path = /var/ansible/log/ansible.log # Example for a production path
# For local dev, you might use:
# log_path = ./ansible.log

[privilege_escalation]
# These settings override the 'become' settings in [defaults] if specified.
# Usually, you'd manage privilege escalation globally in [defaults] unless
# you have very specific, role-specific override scenarios.
# It's good practice to leave this section commented out if not explicitly needed.

[ssh_connection]
# Improves SSH performance by reusing connections. Highly recommended for production.
# The ControlPersist value can be adjusted based on how long you want connections to remain open.
ssh_args = -o ControlMaster=auto -o ControlPersist=60s

# Uses SCP for file transfers over SSH. Generally the default and preferred method.
# scp_if_ssh = True # This is typically true by default and doesn't need explicit setting.

# Number of times to retry an SSH connection. Useful for unstable network conditions.
# retries = 3 # Uncomment if you need this.

# This 'forks' setting is redundant here if already defined in [defaults].
# The one in [defaults] takes precedence.
forks = 5