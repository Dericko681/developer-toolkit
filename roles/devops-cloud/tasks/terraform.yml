---
# Install Terraform (Infrastructure as Code tool).
# Supports specific versions or fetches the latest stable release.

- name: Determine desired Terraform version
  ansible.builtin.set_fact:
    _terraform_version: "{{ terraform_version | default('latest') }}"
  tags:
    - devops
    - terraform

- name: Get latest stable Terraform version if 'latest' is requested
  ansible.builtin.uri:
    url: "https://releases.hashicorp.com/terraform/index.json"
    return_content: true
    method: GET
  register: terraform_releases
  when: _terraform_version == 'latest'
  tags:
    - devops
    - terraform

- name: Set _terraform_version to actual latest stable version
  ansible.builtin.set_fact:
    _terraform_version: "{{ (terraform_releases.json.versions | dict2items | selectattr('value.stable', 'true') | sort(attribute='key', reverse=true) | first).key }}"
  when: _terraform_version == 'latest'
  tags:
    - devops
    - terraform

- name: Check if desired Terraform version is already installed
  ansible.builtin.command: "terraform version -json"
  register: terraform_installed_check
  failed_when: false
  changed_when: false
  tags:
    - devops
    - terraform

- name: Download Terraform zip archive
  ansible.builtin.get_url:
    url: "https://releases.hashicorp.com/terraform/{{ _terraform_version }}/terraform_{{ _terraform_version }}_linux_amd64.zip"
    dest: "/tmp/terraform_{{ _terraform_version }}.zip"
    mode: '0644'
    # Dynamically fetch checksum from the SHA256SUMS file
    checksum: "sha256:{{ lookup('url', 'https://releases.hashicorp.com/terraform/' + _terraform_version + '/terraform_' + _terraform_version + '_SHA256SUMS') | regex_search('terraform_' + _terraform_version + '_linux_amd64\\.zip\\s+([a-f0-9]+)', '\\1') | first }}"
  become: true # Download to a system temporary directory
  # Only download if not installed or if installed version doesn't match desired version
  when: terraform_installed_check.rc != 0 or (_terraform_version not in terraform_installed_check.stdout and _terraform_version != 'latest')
  tags:
    - devops
    - terraform

- name: Extract Terraform binary to /usr/local/bin
  ansible.builtin.unarchive:
    src: "/tmp/terraform_{{ _terraform_version }}.zip"
    dest: /usr/local/bin
    remote_src: yes # Source is on the remote machine's /tmp
    creates: /usr/local/bin/terraform # Idempotency check: creates this binary
  become: true # Requires root to extract to /usr/local/bin
  # Only extract if not installed or if installed version doesn't match desired version
  when: terraform_installed_check.rc != 0 or (_terraform_version not in terraform_installed_check.stdout and _terraform_version != 'latest')
  tags:
    - devops
    - terraform

- name: Clean up Terraform zip archive
  ansible.builtin.file:
    path: "/tmp/terraform_{{ _terraform_version }}.zip"
    state: absent
  become: true
  tags:
    - devops
    - terraform