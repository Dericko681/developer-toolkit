# ~/.zshrc
# Managed by Ansible â€” do not edit manually.

#### OH MY ZSH SETUP ####
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="{{ zsh_theme | default('robbyrussell') }}"

plugins=(
  git
  {% if install_zsh_plugins | bool %}
  zsh-syntax-highlighting
  zsh-autosuggestions
  {% endif %}
)

source $ZSH/oh-my-zsh.sh

{% if install_zsh_plugins | bool %}
# Enable syntax highlighting
# This path is already sourced by oh-my-zsh for standard plugins, but explicitly including it is harmless if needed.
# However, for plugins installed by OMZ's plugin manager, OMZ often handles sourcing.
# If these are custom plugins or installed outside the OMZ plugin system, this is correct.
source ${(q-)ZSH_CUSTOM:-$ZSH/custom}/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# Enable autosuggestions
source ${(q-)ZSH_CUSTOM:-$ZSH/custom}/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
{% endif %}

COMPLETION_WAITING_DOTS="true"

#### COMMON PATHS & ENV VARS ####
# Add ~/.local/bin to PATH for user-installed Python packages (like pip installs --user)
# This handles requirements for Python, Ansible, Hugging Face CLI, etc.
# This line should appear only once.
export PATH="$HOME/.local/bin:$PATH"

#### ALIASES ####
# General
alias ll='ls -lah'
alias update='sudo apt update && sudo apt upgrade -y'

# Version Control
{% if install_version_control | bool %}
alias gs='git status'
alias gc='git commit'
{% endif %}

#### LANGUAGE ENVIRONMENTS ####
{% if install_python | bool %}
# Python
# PATH already handled above in COMMON PATHS
alias py='python3'
alias pip='pip3'
{% endif %}

{% if install_rust | bool %}
# Rust
source "$HOME/.cargo/env" # Use double quotes for paths with spaces or special characters
alias rustup-update='rustup update'
{% endif %}

{% if install_java | bool %}
# Java
# Adjust JAVA_HOME to be dynamic based on architecture and assumed OpenJDK naming
export JAVA_HOME="/usr/lib/jvm/java-{{ java_version | default('17') }}-openjdk-{{ ansible_architecture | regex_replace('x86_64', 'amd64') }}"
alias javac-run='javac *.java && java $(basename *.java .java)'
{% endif %}

{% if install_go | bool %}
# Go
export GOROOT="/usr/local/go"
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"
alias go-build='go build'
{% endif %}

{% if install_nodejs | bool %}
# NodeJS (NVM)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # Load NVM
# NVM Bash Completion is sourced here, no need for duplicate at the end of file
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
alias npm-global='npm install -g'
{% endif %}

#### DEVOPS & CLOUD TOOLS ####
{% if install_terraform | bool %}
alias tf='terraform'
alias tf-plan='terraform plan'
{% endif %}

{% if install_k8s_cli | bool %}
alias k='kubectl'
alias k-get-pods='kubectl get pods --all-namespaces'
{% endif %}

{% if install_k9s | bool %}
alias k9s-start='k9s'
{% endif %}

{% if install_k3s_cli | bool %}
alias k3s-ctl='k3s kubectl'
{% endif %}

{% if install_ansible_cli | bool %}
# PATH already handled above in COMMON PATHS
alias ansible-run='ansible-playbook'
{% endif %}

{% if install_ollama | bool %}
alias ollama-run='ollama run'
{% endif %}

{% if install_minio_client | bool %}
alias mc-ls='mc ls'
{% endif %}

{% if install_argocd_cli | bool %}
alias argocd-sync='argocd app sync'
{% endif %}

{% if install_jenkins_cli | bool %}
alias jenkins-cli='java -jar $HOME/.jenkins/jenkins-cli.jar'
{% endif %}

{% if install_helm | bool %}
alias helm-install='helm install'
{% endif %}

#### AI/ML TOOLS ####
{% if install_huggingface_cli | bool %}
# PATH already handled above in COMMON PATHS
alias hf-login='huggingface-cli login'
{% endif %}

{% if install_jupyterlab | bool %}
alias jupyter-start='jupyter lab'
{% endif %}

{% if install_pytorch | bool %}
alias torch-test='python3 -c "import torch; print(torch.__version__)"'
{% endif %}

{% if install_tensorflow | bool %}
alias tf-test='python3 -c "import tensorflow; print(tensorflow.__version__)"'
{% endif %}

#### DATABASE TOOLS ####
{% if install_db_clients | bool %}
alias psql-connect='psql -U postgres'
{% endif %}

{% if install_postgresql_server | bool %}
alias pg-start='sudo systemctl start postgresql'
alias pg-status='pg_isready'
{% endif %}

#### CLOUD PROVIDERS ####
{% if install_aws_cli | bool %}
alias aws-whoami='aws sts get-caller-identity'
{% endif %}

{% if install_gemini_cli | bool %}
export PATH="/usr/lib/google-cloud-sdk/bin:$PATH"
alias gcloud-auth='gcloud auth login'
{% endif %}

#### IDEs AND EDITORS ####
{% if install_ide_editors | bool %}
alias code-open='code .'
{% endif %}

#### CONTAINERIZATION ####
{% if install_containerization | bool %}
alias docker-ps='docker ps -a'
alias docker-build='docker build .'
# Removed: alias docker="sudo docker"
# It's recommended to log out and log back in (or use 'newgrp docker')
# after adding yourself to the 'docker' group to run Docker commands without sudo.
# This alias circumvents that, which might mask permission issues.
{% endif %}

#### CLI UTILITIES ####
{% if install_cli_tools | bool %}
alias jsonq='jq .'
alias yamlq='yq .'
{% endif %}

#### SDKMAN ####
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

#### SECRET ENVIRONMENT FILES ####
[ -f "$HOME/.secret/github.env" ] && source "$HOME/.secret/github.env"
[ -f "$HOME/.secret/secure.sh" ] && source "$HOME/.secret/secure.sh"

#### GPG ####
export GPG_TTY=$(tty)