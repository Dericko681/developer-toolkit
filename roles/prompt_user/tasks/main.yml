---
# This role interactively prompts the user for installation preferences,
# organized by major categories, and sets corresponding facts.
# These facts control which other roles are executed in the main playbook.

# --- SECTION: Global Preferences ---
- name: Prompt for global settings section
  ansible.builtin.debug:
    msg: "--- Global Installation Preferences ---"
  tags:
    - prompt
    - always

# Example of a global prompt if you had one, e.g., default shell
# - name: Ask for default shell
#   ansible.builtin.pause:
#     prompt: "Which shell do you prefer (bash/zsh)? (bash)"
#     default: "bash"
#   register: preferred_shell_input
#   tags:
#     - prompt
#     - always
# - name: Set fact for preferred shell
#   ansible.builtin.set_fact:
#     preferred_shell: "{{ preferred_shell_input.user_input | default('bash') }}"
#   tags:
#     - prompt
#     - always


# --- SECTION: Base System ---
- name: Prompt to configure Base System tools
  ansible.builtin.pause:
    prompt: "Do you want to configure Base System tools (e.g., Oh My Zsh plugins)? (y/N)"
    echo: yes
  register: install_category_base_system_input
  tags:
    - prompt
    - base-system

- name: Set fact for Base System category preference
  ansible.builtin.set_fact:
    install_category_base_system: "{{ 'true' if install_category_base_system_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - base-system

- name: Prompt for Oh My Zsh plugins if Base System is selected
  ansible.builtin.pause:
    prompt: "Install Oh My Zsh plugins? (y/N)"
    echo: yes
  register: zsh_plugins_input_result
  when: install_category_base_system | bool
  tags:
    - prompt
    - base-system

- name: Set fact for Oh My Zsh plugins installation preference (if category selected)
  ansible.builtin.set_fact:
    install_zsh_plugins: "{{ 'true' if zsh_plugins_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_base_system | bool
  tags:
    - prompt
    - base-system

# --- FIX: Ensure variable is always defined even if category skipped ---
- name: Set default fact for Oh My Zsh plugins installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_zsh_plugins: "false"
  when: not (install_category_base_system | bool)
  tags:
    - prompt
    - base-system


# --- SECTION: Programming Languages & Runtimes ---
- name: Prompt to configure Programming Languages & Runtimes
  ansible.builtin.pause:
    prompt: "Do you want to install Programming Languages & Runtimes (e.g., Rust, Java, Python)? (y/N)"
    echo: yes
  register: install_category_programming_input
  tags:
    - prompt
    - programming

- name: Set fact for Programming Languages category preference
  ansible.builtin.set_fact:
    install_category_programming: "{{ 'true' if install_category_programming_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - programming

- name: Prompt for Rust installation if Programming Languages is selected
  ansible.builtin.pause:
    prompt: "Install Rust? (y/N)"
    echo: yes
  register: rust_input_result
  when: install_category_programming | bool
  tags:
    - prompt
    - programming

- name: Set fact for Rust installation preference (if category selected)
  ansible.builtin.set_fact:
    install_rust: "{{ 'true' if rust_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_programming | bool
  tags:
    - prompt
    - programming
- name: Set default fact for Rust installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_rust: "false"
  when: not (install_category_programming | bool)
  tags:
    - prompt
    - programming

- name: Prompt for Java installation if Programming Languages is selected
  ansible.builtin.pause:
    prompt: "Install Java? (y/N)"
    echo: yes
  register: java_input_result
  when: install_category_programming | bool
  tags:
    - prompt
    - programming

- name: Set fact for Java installation preference (if category selected)
  ansible.builtin.set_fact:
    install_java: "{{ 'true' if java_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_programming | bool
  tags:
    - prompt
    - programming
- name: Set default fact for Java installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_java: "false"
  when: not (install_category_programming | bool)
  tags:
    - prompt
    - programming

- name: Prompt for Go installation if Programming Languages is selected
  ansible.builtin.pause:
    prompt: "Install Go? (y/N)"
    echo: yes
  register: go_input_result
  when: install_category_programming | bool
  tags:
    - prompt
    - programming

- name: Set fact for Go installation preference (if category selected)
  ansible.builtin.set_fact:
    install_go: "{{ 'true' if go_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_programming | bool
  tags:
    - prompt
    - programming
- name: Set default fact for Go installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_go: "false"
  when: not (install_category_programming | bool)
  tags:
    - prompt
    - programming

- name: Prompt for Node.js installation if Programming Languages is selected
  ansible.builtin.pause:
    prompt: "Install Node.js? (y/N)"
    echo: yes
  register: nodejs_input_result
  when: install_category_programming | bool
  tags:
    - prompt
    - programming

- name: Set fact for Node.js installation preference (if category selected)
  ansible.builtin.set_fact:
    install_nodejs: "{{ 'true' if nodejs_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_programming | bool
  tags:
    - prompt
    - programming
- name: Set default fact for Node.js installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_nodejs: "false"
  when: not (install_category_programming | bool)
  tags:
    - prompt
    - programming

- name: Prompt for Python installation if Programming Languages is selected
  ansible.builtin.pause:
    prompt: "Install Python? (y/N)"
    echo: yes
  register: python_input_result
  when: install_category_programming | bool
  tags:
    - prompt
    - programming

- name: Set fact for Python installation preference (if category selected)
  ansible.builtin.set_fact:
    install_python: "{{ 'true' if python_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_programming | bool
  tags:
    - prompt
    - programming
- name: Set default fact for Python installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_python: "false"
  when: not (install_category_programming | bool)
  tags:
    - prompt
    - programming


# --- SECTION: DevOps & Cloud Native Tools ---
- name: Prompt to configure DevOps & Cloud Native Tools
  ansible.builtin.pause:
    prompt: "Do you want to install DevOps & Cloud Native Tools (e.g., Terraform, K8s CLI, Helm)? (y/N)"
    echo: yes
  register: install_category_devops_input
  tags:
    - prompt
    - devops

- name: Set fact for DevOps & Cloud Native category preference
  ansible.builtin.set_fact:
    install_category_devops: "{{ 'true' if install_category_devops_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - devops

- name: Prompt for Terraform installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install Terraform? (y/N)"
    echo: yes
  register: terraform_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for Terraform installation preference (if category selected)
  ansible.builtin.set_fact:
    install_terraform: "{{ 'true' if terraform_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for Terraform installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_terraform: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for Kubernetes CLI (kubectl) installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install Kubernetes CLI (kubectl)? (y/N)"
    echo: yes
  register: k8s_cli_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for Kubernetes CLI installation preference (if category selected)
  ansible.builtin.set_fact:
    install_k8s_cli: "{{ 'true' if k8s_cli_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for Kubernetes CLI installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_k8s_cli: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for K9s installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install K9s? (y/N)"
    echo: yes
  register: k9s_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for K9s installation preference (if category selected)
  ansible.builtin.set_fact:
    install_k9s: "{{ 'true' if k9s_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for K9s installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_k9s: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for K3s client tools installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install K3s client tools? (y/N)"
    echo: yes
  register: k3s_cli_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for K3s client tools installation preference (if category selected)
  ansible.builtin.set_fact:
    install_k3s_cli: "{{ 'true' if k3s_cli_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for K3s client tools installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_k3s_cli: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for Ansible CLI installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install Ansible CLI? (y/N)"
    echo: yes
  register: ansible_cli_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for Ansible CLI installation preference (if category selected)
  ansible.builtin.set_fact:
    install_ansible_cli: "{{ 'true' if ansible_cli_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for Ansible CLI installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_ansible_cli: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for Ollama installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install Ollama? (y/N)"
    echo: yes
  register: ollama_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for Ollama installation preference (if category selected)
  ansible.builtin.set_fact:
    install_ollama: "{{ 'true' if ollama_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for Ollama installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_ollama: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for MinIO Client installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install MinIO Client? (y/N)"
    echo: yes
  register: minio_client_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for MinIO Client installation preference (if category selected)
  ansible.builtin.set_fact:
    install_minio_client: "{{ 'true' if minio_client_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for MinIO Client installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_minio_client: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for Argo CD CLI installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install Argo CD CLI? (y/N)"
    echo: yes
  register: argocd_cli_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for Argo CD CLI installation preference (if category selected)
  ansible.builtin.set_fact:
    install_argocd_cli: "{{ 'true' if argocd_cli_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for Argo CD CLI installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_argocd_cli: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for Jenkins CLI installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install Jenkins CLI? (y/N)"
    echo: yes
  register: jenkins_cli_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for Jenkins CLI installation preference (if category selected)
  ansible.builtin.set_fact:
    install_jenkins_cli: "{{ 'true' if jenkins_cli_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for Jenkins CLI installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_jenkins_cli: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops

- name: Prompt for Helm installation if DevOps is selected
  ansible.builtin.pause:
    prompt: "Install Helm? (y/N)"
    echo: yes
  register: helm_input_result
  when: install_category_devops | bool
  tags:
    - prompt
    - devops

- name: Set fact for Helm installation preference (if category selected)
  ansible.builtin.set_fact:
    install_helm: "{{ 'true' if helm_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_devops | bool
  tags:
    - prompt
    - devops
- name: Set default fact for Helm installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_helm: "false"
  when: not (install_category_devops | bool)
  tags:
    - prompt
    - devops


# --- SECTION: AI/ML/Data Science Tools ---
- name: Prompt to configure AI/ML/Data Science Tools
  ansible.builtin.pause:
    prompt: "Do you want to install AI/ML/Data Science Tools (e.g., Hugging Face, JupyterLab)? (y/N)"
    echo: yes
  register: install_category_ai_ml_input
  tags:
    - prompt
    - ai-ml

- name: Set fact for AI/ML/Data Science category preference
  ansible.builtin.set_fact:
    install_category_ai_ml: "{{ 'true' if install_category_ai_ml_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - ai-ml

- name: Prompt for Hugging Face CLI installation if AI/ML is selected
  ansible.builtin.pause:
    prompt: "Install Hugging Face CLI? (y/N)"
    echo: yes
  register: huggingface_cli_input_result
  when: install_category_ai_ml | bool
  tags:
    - prompt
    - ai-ml

- name: Set fact for Hugging Face CLI installation preference (if category selected)
  ansible.builtin.set_fact:
    install_huggingface_cli: "{{ 'true' if huggingface_cli_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_ai_ml | bool
  tags:
    - prompt
    - ai-ml
- name: Set default fact for Hugging Face CLI installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_huggingface_cli: "false"
  when: not (install_category_ai_ml | bool)
  tags:
    - prompt
    - ai-ml

- name: Prompt for JupyterLab installation if AI/ML is selected
  ansible.builtin.pause:
    prompt: "Install JupyterLab? (y/N)"
    echo: yes
  register: jupyterlab_input_result
  when: install_category_ai_ml | bool
  tags:
    - prompt
    - ai-ml

- name: Set fact for JupyterLab installation preference (if category selected)
  ansible.builtin.set_fact:
    install_jupyterlab: "{{ 'true' if jupyterlab_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_ai_ml | bool
  tags:
    - prompt
    - ai-ml
- name: Set default fact for JupyterLab installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_jupyterlab: "false"
  when: not (install_category_ai_ml | bool)
  tags:
    - prompt
    - ai-ml

- name: Prompt for PyTorch installation if AI/ML is selected
  ansible.builtin.pause:
    prompt: "Install PyTorch? (y/N)"
    echo: yes
  register: pytorch_input_result
  when: install_category_ai_ml | bool
  tags:
    - prompt
    - ai-ml

- name: Set fact for PyTorch installation preference (if category selected)
  ansible.builtin.set_fact:
    install_pytorch: "{{ 'true' if pytorch_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_ai_ml | bool
  tags:
    - prompt
    - ai-ml
- name: Set default fact for PyTorch installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_pytorch: "false"
  when: not (install_category_ai_ml | bool)
  tags:
    - prompt
    - ai-ml

- name: Prompt for TensorFlow installation if AI/ML is selected
  ansible.builtin.pause:
    prompt: "Install TensorFlow? (y/N)"
    echo: yes
  register: tensorflow_input_result
  when: install_category_ai_ml | bool
  tags:
    - prompt
    - ai-ml

- name: Set fact for TensorFlow installation preference (if category selected)
  ansible.builtin.set_fact:
    install_tensorflow: "{{ 'true' if tensorflow_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_ai_ml | bool
  tags:
    - prompt
    - ai-ml
- name: Set default fact for TensorFlow installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_tensorflow: "false"
  when: not (install_category_ai_ml | bool)
  tags:
    - prompt
    - ai-ml


# --- SECTION: Database Tools ---
- name: Prompt to configure Database Tools
  ansible.builtin.pause:
    prompt: "Do you want to install Database Tools (e.g., Clients, PostgreSQL Server)? (y/N)"
    echo: yes
  register: install_category_databases_input
  tags:
    - prompt
    - databases

- name: Set fact for Databases category preference
  ansible.builtin.set_fact:
    install_category_databases: "{{ 'true' if install_category_databases_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - databases

- name: Prompt for Database Clients installation if Databases is selected
  ansible.builtin.pause:
    prompt: "Install Database Clients (e.g., DBeaver, TablePlus)? (y/N)"
    echo: yes
  register: db_clients_input_result
  when: install_category_databases | bool
  tags:
    - prompt
    - databases

- name: Set fact for Database Clients installation preference (if category selected)
  ansible.builtin.set_fact:
    install_db_clients: "{{ 'true' if db_clients_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_databases | bool
  tags:
    - prompt
    - databases
- name: Set default fact for Database Clients installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_db_clients: "false"
  when: not (install_category_databases | bool)
  tags:
    - prompt
    - databases

- name: Prompt for PostgreSQL Server installation if Databases is selected
  ansible.builtin.pause:
    prompt: "Install PostgreSQL Server? (y/N)"
    echo: yes
  register: postgresql_server_input_result
  when: install_category_databases | bool
  tags:
    - prompt
    - databases

- name: Set fact for PostgreSQL Server installation preference (if category selected)
  ansible.builtin.set_fact:
    install_postgresql_server: "{{ 'true' if postgresql_server_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_databases | bool
  tags:
    - prompt
    - databases
- name: Set default fact for PostgreSQL Server installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_postgresql_server: "false"
  when: not (install_category_databases | bool)
  tags:
    - prompt
    - databases


# --- SECTION: Cloud Provider CLIs ---
- name: Prompt to configure Cloud Provider CLIs
  ansible.builtin.pause:
    prompt: "Do you want to install Cloud Provider CLIs (e.g., AWS, Google Cloud)? (y/N)"
    echo: yes
  register: install_category_cloud_cli_input
  tags:
    - prompt
    - cloud-cli

- name: Set fact for Cloud Provider CLIs category preference
  ansible.builtin.set_fact:
    install_category_cloud_cli: "{{ 'true' if install_category_cloud_cli_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - cloud-cli

- name: Prompt for AWS CLI installation if Cloud CLIs are selected
  ansible.builtin.pause:
    prompt: "Install AWS CLI? (y/N)"
    echo: yes
  register: aws_cli_input_result
  when: install_category_cloud_cli | bool
  tags:
    - prompt
    - cloud-cli

- name: Set fact for AWS CLI installation preference (if category selected)
  ansible.builtin.set_fact:
    install_aws_cli: "{{ 'true' if aws_cli_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_cloud_cli | bool
  tags:
    - prompt
    - cloud-cli
- name: Set default fact for AWS CLI installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_aws_cli: "false"
  when: not (install_category_cloud_cli | bool)
  tags:
    - prompt
    - cloud-cli

- name: Prompt for Google Cloud SDK (gcloud CLI) installation if Cloud CLIs are selected
  ansible.builtin.pause:
    prompt: "Install Google Cloud SDK (gcloud CLI)? (y/N)"
    echo: yes
  register: gemini_cli_input_result # Keeping original variable name for consistency with main.yml
  when: install_category_cloud_cli | bool
  tags:
    - prompt
    - cloud-cli

- name: Set fact for Google Cloud SDK installation preference (if category selected)
  ansible.builtin.set_fact:
    install_gemini_cli: "{{ 'true' if gemini_cli_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_cloud_cli | bool
  tags:
    - prompt
    - cloud-cli
- name: Set default fact for Google Cloud SDK installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_gemini_cli: "false"
  when: not (install_category_cloud_cli | bool)
  tags:
    - prompt
    - cloud-cli


# --- SECTION: IDEs and Editors ---
- name: Prompt to configure IDEs and Editors
  ansible.builtin.pause:
    prompt: "Do you want to install IDEs and Editors (e.g., VS Code)? (y/N)"
    echo: yes
  register: install_category_ides_editors_input
  tags:
    - prompt
    - ide-editors

- name: Set fact for IDEs and Editors category preference
  ansible.builtin.set_fact:
    install_category_ides_editors: "{{ 'true' if install_category_ides_editors_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - ide-editors

- name: Prompt for VS Code installation if IDEs/Editors are selected
  ansible.builtin.pause:
    prompt: "Install VS Code? (y/N)"
    echo: yes
  register: ide_editors_input_result
  when: install_category_ides_editors | bool
  tags:
    - prompt
    - ide-editors

- name: Set fact for VS Code installation preference (if category selected)
  ansible.builtin.set_fact:
    install_ide_editors: "{{ 'true' if ide_editors_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_ides_editors | bool
  tags:
    - prompt
    - ide-editors
- name: Set default fact for VS Code installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_ide_editors: "false"
  when: not (install_category_ides_editors | bool)
  tags:
    - prompt
    - ide-editors


# --- SECTION: Version Control Tools ---
- name: Prompt to configure Version Control Tools
  ansible.builtin.pause:
    prompt: "Do you want to install Version Control Tools (e.g., Git, GitHub CLI)? (y/N)"
    echo: yes
  register: install_category_version_control_input
  tags:
    - prompt
    - version-control

- name: Set fact for Version Control category preference
  ansible.builtin.set_fact:
    install_category_version_control: "{{ 'true' if install_category_version_control_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - version-control

- name: Prompt for Version Control tools installation if Version Control is selected
  ansible.builtin.pause:
    prompt: "Install Version Control tools? (y/N)"
    echo: yes
  register: version_control_input_result
  when: install_category_version_control | bool
  tags:
    - prompt
    - version-control

- name: Set fact for Version Control tools installation preference (if category selected)
  ansible.builtin.set_fact:
    install_version_control: "{{ 'true' if version_control_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_version_control | bool
  tags:
    - prompt
    - version-control
- name: Set default fact for Version Control tools installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_version_control: "false"
  when: not (install_category_version_control | bool)
  tags:
    - prompt
    - version-control


# --- SECTION: Containerization Tools ---
- name: Prompt to configure Containerization Tools
  ansible.builtin.pause:
    prompt: "Do you want to install Containerization Tools (e.g., Docker, Docker Compose)? (y/N)"
    echo: yes
  register: install_category_containerization_input
  tags:
    - prompt
    - containerization

- name: Set fact for Containerization category preference
  ansible.builtin.set_fact:
    install_category_containerization: "{{ 'true' if install_category_containerization_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - containerization

- name: Prompt for Containerization tools installation if Containerization is selected
  ansible.builtin.pause:
    prompt: "Install Containerization tools? (y/N)"
    echo: yes
  register: containerization_input_result
  when: install_category_containerization | bool
  tags:
    - prompt
    - containerization

- name: Set fact for Containerization tools installation preference (if category selected)
  ansible.builtin.set_fact:
    install_containerization: "{{ 'true' if containerization_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_containerization | bool
  tags:
    - prompt
    - containerization
- name: Set default fact for Containerization tools installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_containerization: "false"
  when: not (install_category_containerization | bool)
  tags:
    - prompt
    - containerization


# --- SECTION: CLI Tools ---
- name: Prompt to configure general CLI Tools
  ansible.builtin.pause:
    prompt: "Do you want to install general CLI Tools (e.g., jq, yq)? (y/N)"
    echo: yes
  register: install_category_cli_tools_input
  tags:
    - prompt
    - cli-tools

- name: Set fact for CLI Tools category preference
  ansible.builtin.set_fact:
    install_category_cli_tools: "{{ 'true' if install_category_cli_tools_input.user_input | default('n') | lower == 'y' else 'false' }}"
  tags:
    - prompt
    - cli-tools

- name: Prompt for CLI Tools installation if CLI Tools is selected
  ansible.builtin.pause:
    prompt: "Install general CLI Tools? (y/N)"
    echo: yes
  register: cli_tools_input_result
  when: install_category_cli_tools | bool
  tags:
    - prompt
    - cli-tools

- name: Set fact for CLI Tools installation preference (if category selected)
  ansible.builtin.set_fact:
    install_cli_tools: "{{ 'true' if cli_tools_input_result.user_input | default('n') | lower == 'y' else 'false' }}"
  when: install_category_cli_tools | bool
  tags:
    - prompt
    - cli-tools
- name: Set default fact for CLI Tools installation preference (if category skipped)
  ansible.builtin.set_fact:
    install_cli_tools: "false"
  when: not (install_category_cli_tools | bool)
  tags:
    - prompt
    - cli-tools

# Display summary of selected tools
- name: Display summary of selected tools
  ansible.builtin.debug:
    msg: |
      Installation preferences:
      Oh My Zsh Plugins: {{ install_zsh_plugins | default('Not Selected (Category skipped)') }}
      Rust: {{ install_rust | default('Not Selected (Category skipped)') }}
      Java: {{ install_java | default('Not Selected (Category skipped)') }}
      Go: {{ install_go | default('Not Selected (Category skipped)') }}
      Node.js: {{ install_nodejs | default('Not Selected (Category skipped)') }}
      Python: {{ install_python | default('Not Selected (Category skipped)') }}
      Terraform: {{ install_terraform | default('Not Selected (Category skipped)') }}
      Kubernetes CLI (kubectl): {{ install_k8s_cli | default('Not Selected (Category skipped)') }}
      K9s: {{ install_k9s | default('Not Selected (Category skipped)') }}
      K3s client: {{ install_k3s_cli | default('Not Selected (Category skipped)') }}
      Ansible CLI: {{ install_ansible_cli | default('Not Selected (Category skipped)') }}
      Ollama: {{ install_ollama | default('Not Selected (Category skipped)') }}
      MinIO Client: {{ install_minio_client | default('Not Selected (Category skipped)') }}
      Argo CD CLI: {{ install_argocd_cli | default('Not Selected (Category skipped)') }}
      Jenkins CLI: {{ install_jenkins_cli | default('Not Selected (Category skipped)') }}
      Helm: {{ install_helm | default('Not Selected (Category skipped)') }}
      Hugging Face CLI: {{ install_huggingface_cli | default('Not Selected (Category skipped)') }}
      JupyterLab: {{ install_jupyterlab | default('Not Selected (Category skipped)') }}
      PyTorch: {{ install_pytorch | default('Not Selected (Category skipped)') }}
      TensorFlow: {{ install_tensorflow | default('Not Selected (Category skipped)') }}
      Database Clients: {{ install_db_clients | default('Not Selected (Category skipped)') }}
      PostgreSQL Server: {{ install_postgresql_server | default('Not Selected (Category skipped)') }}
      AWS CLI: {{ install_aws_cli | default('Not Selected (Category skipped)') }}
      Google Cloud SDK: {{ install_gemini_cli | default('Not Selected (Category skipped)') }}
      VS Code: {{ install_ide_editors | default('Not Selected (Category skipped)') }}
      Version Control: {{ install_version_control | default('Not Selected (Category skipped)') }}
      Containerization: {{ install_containerization | default('Not Selected (Category skipped)') }}
      CLI Tools: {{ install_cli_tools | default('Not Selected (Category skipped)') }}
  tags:
    - prompt
    - summary